#!/bin/bash
set -euE -o pipefail
trap 'echo "$0: failed at line $LINENO: $BASH_COMMAND"' ERR
sbr() { "$SBR" "$@" ;}

main()
{
	name=''
	source=''
	cache=''
	remotes=()
	cache_keep=''
	remote_keep=''
	password_file=''
	containers=()
	force_hooks=false
	light_compression=false

	while :; do case ${1:-} in

		--name                ) name=$2;                     shift 2 ;;
		--name=*              ) name=${1#*=};                shift   ;;

		--source              ) source=$2;                   shift 2 ;;
		--source=*            ) source=${1#*=};              shift   ;;

		--cache               ) cache=$2;                    shift 2 ;;
		--cache=*             ) cache=${1#*=};               shift   ;;

		--remote              ) remotes+=("$2");             shift 2 ;;
		--remote=*            ) remotes+=("${1#*=}");        shift   ;;

		--cache-keep          ) cache_keep=$2;               shift 2 ;;
		--cache-keep=*        ) cache_keep=${1#*=};          shift   ;;

		--remote-keep         ) remote_keep=$2;              shift 2 ;;
		--remote-keep=*       ) remote_keep=${1#*=};         shift   ;;

		--password-file       ) password_file=$2;            shift 2 ;;
		--password-file=*     ) password_file=${1#*=};       shift   ;;

		--containers          ) containers+=("$2");          shift 2 ;;
		--containers=*        ) containers+=("${1#*=}");     shift   ;;

		--light-compression   ) light_compression=true;      shift   ;;
		--light-compression=* ) light_compression=${1#*=};   shift   ;;

		--force-hooks         ) force_hooks=true;            shift   ;;
		--force-hooks=*       ) force_hooks=${1#*=};         shift   ;;

		'') break ;;
		*) die "unrecognized option '$1'" ;;

	esac; done

	[[ -z $name   ]] && die 'no name specified'
	[[ -z $source ]] && die 'no source specified'
	[[ -z $cache  ]] && die 'no cache specified'

	stopped_containers=()

	for c in "${containers[@]}"; do
		if sbr dc-is-running "$c"; then
			stopped_containers+=("$c")
		elif [[ $force_hooks != true ]]; then
			die "container '$c' is not running"
		fi
	done

	for c in "${stopped_containers[@]}"; do
		echo "stopping container '$c'..."
		sbr dc-stop "$c"
	done

	echo "archiving '$source'..."

	mkdir --parents --mode=700 -- "$cache"

	if [[ -n $password_file ]]; then
		target=$(sbr write-target "$name.tar.zst.asc" "$cache")
	else
		target=$(sbr write-target "$name.tar.zst" "$cache")
	fi

	trap 'rm -f -- "$target"' EXIT

	if [[ $light_compression == true ]]; then
		export ZSTD_CLEVEL=1
	fi

	sbr archive-from "$source" |
		sbr zstd |
		(
			if [[ -n $password_file ]]; then
				sbr encrypt "$password_file"
			else
				cat
			fi
		) > "$target"

	trap - EXIT

	for c in "${stopped_containers[@]}"; do
		echo "starting container '$c'..."
		sbr dc-start "$c"
	done

	for r in "${remotes[@]}"; do
		echo "exporting to '$r'..."
		sbr copy "$cache" "$r"
	done

	if [[ -n $cache_keep ]]; then
		echo "trimming '$cache'..."
		trim "$cache" "$cache_keep"
	fi

	if [[ -n $remote_keep ]]; then
		for r in "${remotes[@]}"; do
			echo "trimming '$r'..."
			trim "$r" "$remote_keep"
		done
	fi

	echo 'done.'
}

trim()
{
	local path=$1 keep=$2

	sbr list "$path" |
		sbr oldest "$keep" |
		sbr xargs -I{} sbr rmfile "$path/{}"

	readarray -t files < <(sbr list "$path")

	if [[ ${#files[@]} -gt $keep ]]; then
		die "error: number of files in '$path' (${#files[@]}) is higher than requested ($keep) after trimming"
	fi
}

die()
{
	printf '%s\n' "$@" >&2
	exit 1
}

main "$@"
