#!/bin/bash
set -euE -o pipefail
trap 'echo "${0##*/}: failed @ line $LINENO: $BASH_COMMAND"' ERR

main()
{
	cmd=${1:-}

	case $cmd in
		isnewer|isnumber|new|nth|old|sort|unzstd|write|xargs|zstd)
			lib "$@"
		;;
		backup|check|export|restore-latest|trim)
			bin "$@"
		;;
		chmod|chown|clear|exists|list|ls|\
		mkdir|rm|rmdir|rmfile|tar-from|untar-to)
			fs "$@"
		;;
		copy)
			remote "$@"
		;;
		*)
			print_help
			exit 1
		;;
	esac
}

lib()
{
	local cmd=$1
	shift
	call "lib/$cmd" "$@"
}

bin()
{
	local cmd=$1
	shift
	call "bin/$cmd" "$@"
}

fs()
{
	local cmd=$1 path=$2
	IFS=$'\n' read -d '' -ra seg <<< "${path//:/$'\n'}" ||:
	if [[ ${#seg[@]} -le 1 ]]; then
		call "fs/local/$cmd" "$path"
		return
	fi
	case ${seg[0]} in
		docker-volume|dv)
			volume=${seg[1]}
			path=${seg[2]:-}
			if ! docker volume inspect -- "$volume" >/dev/null 2>&1; then
				echo "'$volume': no such docker volume" >&2
				exit 1
			fi
			call "fs/docker-volume/$cmd" "$volume" ${path:+"$path"}
		;;
		rclone)
			path=${seg[1]}
			call "fs/rclone/$cmd" "$path"
		;;
		mariadb-docker|mdbd)
			container=${seg[1]}
			database=${seg[2]}
			optfile=${seg[3]:-}
			call "fs/mariadb-docker/$cmd" "$container" "$database" ${optfile:+"$optfile"}
		;;
		local)
			path=${seg[1]}
			call "fs/local/$cmd" "$path"
		;;
		*)
			call "fs/local/$cmd" "$path"
		;;
	esac
}

remote()
{
	local cmd=$1 path1=$2 path2=$3
	if [[ $path1 == rclone:* ]] || [[ $path2 == rclone:* ]]; then
		path1=${path1#rclone:}
		path2=${path2#rclone:}
		call "fs/rclone/$cmd" "$path1" "$path2"
	else
		echo 'this command does not support the given path type combination' >&2
		exit 1
	fi
}

call()
{
	local cmd=$1
	shift
	SBR="$0" "$SBR_LIB_DIR/$cmd" "$@"
}

split()
{
	local arr
	IFS=$'\n' read -d '' -ra seg <<< "${1//:/$'\n'}"
	printf '%s\n' "${arr[@]}"
}

print_help()
{
cat << EOF

usage: sbr COMMAND [ARG...]

bin commands:

  backup  check  export
  restore-latest  trim

lib commands:

  isnewer  isnumber  new  nth  old
  sort  unzstd  write  xargs  zstd

fs commands:

  chmod  chown  clear  exists  list
  ls  mkdir  rm  rmdir  rmfile
  tar-from  untar-to

remote commands:

  copy

EOF
}

main "$@"
