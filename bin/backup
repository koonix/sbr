#!/bin/bash
set -euE -o pipefail
trap 'echo "$0: failed at line $LINENO: $BASH_COMMAND"' ERR
sbr() { "$SBR" "$@" ;}

main()
{
	name=''
	source=''
	cache=''
	remotes=()
	cache_keep=''
	remote_keep=''
	password_file=''
	container=''
	force=false

	while :; do case ${1:-} in

		--name            ) name=$2;                shift 2 ;;
		--name=*          ) name=${1#*=};           shift   ;;

		--source          ) source=$2;              shift 2 ;;
		--source=*        ) source=${1#*=};         shift   ;;

		--cache           ) cache=$2;               shift 2 ;;
		--cache=*         ) cache=${1#*=};          shift   ;;

		--remote          ) remotes+=("$2");        shift 2 ;;
		--remote=*        ) remotes+=("${1#*=}");   shift   ;;

		--cache-keep      ) cache_keep=$2;          shift 2 ;;
		--cache-keep=*    ) cache_keep=${1#*=};     shift   ;;

		--remote-keep     ) remote_keep=$2;         shift 2 ;;
		--remote-keep=*   ) remote_keep=${1#*=};    shift   ;;

		--password-file   ) password_file=$2;       shift 2 ;;
		--password-file=* ) password_file=${1#*=};  shift   ;;

		--container       ) container=$2;           shift 2 ;;
		--container=*     ) container=${1#*=};      shift   ;;

		--force           ) force=true              shift   ;;

		'') break ;;
		*) die "unrecognized option '$1'" ;;

	esac; done

	[[ -z $source ]] && die 'no source specified'
	[[ -z $cache  ]] && die 'no cache specified'

	run_container=false

	if [[ -n $container ]] && sbr dc-is-running "$container"; then
		echo "stopping container '$container'..."
		sbr dc-stop "$container"
		run_container=true
	elif [[ -n $container ]] && [[ $force != true ]]; then
		die "container '$container' is not running"
	fi

	echo "archiving '$source'..."

	mkdir --parents --mode=700 -- "$cache"

	sbr archive-from "$source" |
		sbr zstd |
		(
			if [[ -n $password_file ]]; then
				sbr encrypt "$password_file"
			else
				cat
			fi
		) |
		sbr write "$name.tar.zst.asc" "$cache"

	if [[ $run_container == true ]]; then
		echo "starting container '$container'..."
		sbr dc-start "$container"
	fi

	for r in "${remotes[@]}"; do
		echo "exporting to '$r'..."
		sbr copy "$cache" "$r"
	done

	if [[ -n $cache_keep ]]; then
		echo "trimming '$cache'..."
		trim "$cache" "$cache_keep"
	fi

	if [[ -n $remote_keep ]]; then
		for r in "${remotes[@]}"; do
			echo "trimming '$r'..."
			trim "$r" "$remote_keep"
		done
	fi

	echo 'done.'
}

trim()
{
	local path=$1 keep=$2

	echo "trimming '$path'..."

	sbr list "$path" |
		sbr oldest "$keep" |
		sbr xargs -I{} sbr rmfile "$path/{}"

	readarray -t files < <(sbr list "$path")

	if [[ ${#files[@]} -gt $keep ]]; then
		die "error: number of files in '$path' (${#files[@]}) is higher than requested ($keep) after trimming"
	fi
}

die()
{
	printf '%s\n' "$@" >&2
	exit 1
}

main "$@"
